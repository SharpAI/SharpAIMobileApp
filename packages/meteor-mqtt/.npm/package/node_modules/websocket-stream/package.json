{
  "_args": [
    [
      {
        "raw": "websocket-stream@https://registry.npmjs.org/websocket-stream/-/websocket-stream-5.1.2.tgz",
        "scope": null,
        "escapedName": "websocket-stream",
        "name": "websocket-stream",
        "rawSpec": "https://registry.npmjs.org/websocket-stream/-/websocket-stream-5.1.2.tgz",
        "spec": "https://registry.npmjs.org/websocket-stream/-/websocket-stream-5.1.2.tgz",
        "type": "remote"
      },
      "/Users/simba/workspace/mobile_app_server/hotShareMobile/packages/meteor-mqtt/.npm/package-new-1qjvhn2"
    ]
  ],
  "_from": "websocket-stream@>=5.0.0 <6.0.0",
  "_id": "websocket-stream@5.1.2",
  "_inCache": true,
  "_location": "/websocket-stream",
  "_npmUser": {
    "name": "maxogden",
    "email": "max@maxogden.com"
  },
  "_phantomChildren": {},
  "_requested": {
    "raw": "websocket-stream@https://registry.npmjs.org/websocket-stream/-/websocket-stream-5.1.2.tgz",
    "scope": null,
    "escapedName": "websocket-stream",
    "name": "websocket-stream",
    "rawSpec": "https://registry.npmjs.org/websocket-stream/-/websocket-stream-5.1.2.tgz",
    "spec": "https://registry.npmjs.org/websocket-stream/-/websocket-stream-5.1.2.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/",
    "/mqtt"
  ],
  "_resolved": "https://registry.npmjs.org/websocket-stream/-/websocket-stream-5.1.2.tgz",
  "_shasum": "1c31c627bcdf34f1a9bdacc9daa15bfa4816d9ad",
  "_shrinkwrap": null,
  "_spec": "websocket-stream@https://registry.npmjs.org/websocket-stream/-/websocket-stream-5.1.2.tgz",
  "_where": "/Users/simba/workspace/mobile_app_server/hotShareMobile/packages/meteor-mqtt/.npm/package-new-1qjvhn2",
  "author": "",
  "browser": {
    "./echo-server.js": "./fake-server.js",
    "./index.js": "./stream.js",
    "ws": "./ws-fallback.js"
  },
  "bugs": {
    "url": "https://github.com/maxogden/websocket-stream/issues"
  },
  "dependencies": {
    "duplexify": "^3.5.1",
    "inherits": "^2.0.1",
    "readable-stream": "^2.3.3",
    "safe-buffer": "^5.1.1",
    "ws": "^3.2.0",
    "xtend": "^4.0.0"
  },
  "description": "Use websockets with the node streams API. Works in browser and node",
  "devDependencies": {
    "beefy": "^2.1.1",
    "browserify": "^14.5.0",
    "concat-stream": "^1.4.7",
    "tape": "^4.8.0"
  },
  "homepage": "https://github.com/maxogden/websocket-stream#readme",
  "keywords": [
    "websocket",
    "websockets",
    "stream",
    "streams",
    "realtime"
  ],
  "license": "BSD-2-Clause",
  "main": "index.js",
  "name": "websocket-stream",
  "optionalDependencies": {},
  "readme": "# websocket-stream\n\n[![NPM](https://nodei.co/npm/websocket-stream.png?global=true)](https://nodei.co/npm/websocket-stream/)\n\nUse HTML5 [websockets](https://developer.mozilla.org/en-US/docs/WebSockets) using the Node Streams API.\n\n### Usage\n\nThis module works in Node or in Browsers that support WebSockets. You can use [browserify](http://github.com/substack/node-browserify) to package this module for browser use.\n\n```javascript\nvar websocket = require('websocket-stream')\nvar ws = websocket('ws://echo.websocket.org')\nprocess.stdin.pipe(ws)\nws.pipe(process.stdout)\n```\n\nIn the example above `ws` is a duplex stream. That means you can pipe output to anything that accepts streams. You can also pipe data into streams (such as a webcam feed or audio data).\n\nThe underlying `WebSocket` instance is available as `ws.socket`.\n\n#### Options\n\nThe available options differs depending on if you use this module in the browser or with node.js. Options can be passed in as the third or second argument - `WebSocket(address, [protocols], [options])`.\n\n##### `options.browserBufferSize`\n\nHow much to allow the [socket.bufferedAmount](https://developer.mozilla.org/en-US/docs/Web/API/WebSocket#Attributes) to grow before starting to throttle writes. This option has no effect in node.js.\n\nDefault: `1024 * 512` (512KiB)\n\n##### `options.browserBufferTimeout`\n\nHow long to wait before checking if the socket buffer has drained sufficently for another write. This option has no effect in node.js.\n\nDefault: `1000` (1 second)\n\n##### `options.objectMode`\n\nSend each chunk on its own, and do not try to pack them in a single\nwebsocket frame.\n\nDefault: `false`\n\n##### `options.binary`\n\nAlways convert to `Buffer` in Node.js before sending.\nForces `options.objectMode` to `false`.\n\nDefault: `true`\n\n##### `options.perMessageDeflate`\n\nWe recommend disabling the [per message deflate\nextension](https://tools.ietf.org/html/rfc7692) to achieve the best\nthroughput.\n\nDefault: `true` on the client, `false` on the server.\n\nExample:\n\n```js\nvar websocket = require('websocket-stream')\nvar ws = websocket('ws://realtimecats.com', {\n  perMessageDeflate: false\n})\n```\n\nBeware that this option is ignored by browser clients. To make sure that permessage-deflate is never used, disable it on the server.\n\n##### Other options\n\nWhen used in node.js see the [ws.WebSocket documentation](https://github.com/websockets/ws/blob/master/doc/ws.md#class-wswebsocket)\n\n### On the server\n\nUsing the [`ws`](http://npmjs.org/ws) module you can make a websocket server and use this module to get websocket streams on the server:\n\n```javascript\nvar websocket = require('websocket-stream')\nvar wss = websocket.createServer({server: someHTTPServer}, handle)\n\nfunction handle(stream, request) {\n  // `request` is the upgrade request sent by the client.\n  fs.createReadStream('bigdata.json').pipe(stream)\n}\n```\n\nWe recommend disabling the [per message deflate\nextension](https://tools.ietf.org/html/rfc7692) to achieve the best\nthroughput:\n\n```javascript\nvar websocket = require('websocket-stream')\nvar wss = websocket.createServer({\n  perMessageDeflate: false,\n  server: someHTTPServer\n}, handle)\n\nfunction handle(stream) {\n  fs.createReadStream('bigdata.json').pipe(stream)\n}\n```\n\nYou can even use it on express.js with the [express-ws](https://www.npmjs.com/package/express-ws) library:\n\n```js\nconst express = require('express');\nconst expressWebSocket = require('express-ws');\nconst websocketStream = require('websocket-stream/stream');\nconst app = express();\n\n// extend express app with app.ws()\nexpressWebSocket(app, null, {\n    // ws options here\n    perMessageDeflate: false,\n});\n \napp.ws('/bigdata.json', function(ws, req) {\n  // convert ws instance to stream\n  const stream = websocketStream(ws, {\n    // websocket-stream options here\n    binary: true,\n  });\n\n  fs.createReadStream('bigdata.json').pipe(stream);\n});\n \napp.listen(3000);\n```\n\n## Run the tests\n\n### Server-side tests\n\n```\nnpm test\n```\n\n### Client-side tests\n\nFirst start the echo server by running `node test-server.js`\n\nThen run `npm start` and open `localhost:9966` in your browser and open the Dev Tools console to see test output.\n\n## license\n\nBSD LICENSE\n",
  "readmeFilename": "readme.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/maxogden/websocket-stream.git"
  },
  "scripts": {
    "start": "beefy test-client.js",
    "test": "node test.js"
  },
  "version": "5.1.2"
}
