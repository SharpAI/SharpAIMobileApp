{
  "_args": [
    [
      {
        "raw": "node_memcached@https://registry.npmjs.org/node_memcached/-/node_memcached-1.1.3.tgz",
        "scope": null,
        "escapedName": "node_memcached",
        "name": "node_memcached",
        "rawSpec": "https://registry.npmjs.org/node_memcached/-/node_memcached-1.1.3.tgz",
        "spec": "https://registry.npmjs.org/node_memcached/-/node_memcached-1.1.3.tgz",
        "type": "remote"
      },
      "/Users/simba/workspace/mobile_app_server/hotShareMobile/packages/npm-container/.npm/package-new-15oga7z"
    ]
  ],
  "_from": "node_memcached@1.1.3",
  "_id": "node_memcached@1.1.3",
  "_inCache": true,
  "_location": "/node_memcached",
  "_phantomChildren": {},
  "_requested": {
    "raw": "node_memcached@https://registry.npmjs.org/node_memcached/-/node_memcached-1.1.3.tgz",
    "scope": null,
    "escapedName": "node_memcached",
    "name": "node_memcached",
    "rawSpec": "https://registry.npmjs.org/node_memcached/-/node_memcached-1.1.3.tgz",
    "spec": "https://registry.npmjs.org/node_memcached/-/node_memcached-1.1.3.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/",
    "/aliyun-sdk"
  ],
  "_resolved": "https://registry.npmjs.org/node_memcached/-/node_memcached-1.1.3.tgz",
  "_shasum": "89c152af88ad28817f00d891c990451d5d712ea8",
  "_shrinkwrap": null,
  "_spec": "node_memcached@https://registry.npmjs.org/node_memcached/-/node_memcached-1.1.3.tgz",
  "_where": "/Users/simba/workspace/mobile_app_server/hotShareMobile/packages/npm-container/.npm/package-new-15oga7z",
  "author": {
    "name": "chylvina",
    "email": "chylvina@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/chylvina/node_memcached/issues"
  },
  "dependencies": {
    "debug": "^2.1.0"
  },
  "description": "Memcached client library",
  "devDependencies": {
    "lodash": "^2.4.1",
    "mocha": "^2.0.1",
    "should": "^4.3.0"
  },
  "homepage": "https://github.com/chylvina/node_memcached#readme",
  "keywords": [
    "memcached"
  ],
  "main": "./index.js",
  "name": "node_memcached",
  "optionalDependencies": {},
  "readme": "node_memcached\n===========================\n\n这是一个为 node.js 开发的 memcached 客户端，使用二进制传输协议，支持 SASL 鉴权。特别针对阿里云 OCS 进行优化。\n\n该项目基于 [redis](https://github.com/mranney/node_redis) 和 [memjs](https://github.com/alevy/memjs) 开发。\n\n安装:\n\n    npm install node_memcached\n\n## 从 0.2.x 版本迁移\n\n从 0.2.x 版本迁移的开发者请注意，在所有的命令返回中不再使用 res.val.toString() 得到数据，直接使用即可：\n\n```javascript\n  client.get('key', function(err, res) {\n    // 不要这样\n    console.log(res.val.toString());\n  })\n\n  client.get('key', function(err, res) {\n    // 直接获取数据\n    console.log(res);\n  })\n```\n\n## 使用方法\n\n```javascript\n  var PORT = 11211;\n  var HOST = '127.0.0.1';\n  var username = 'myname';\n  var password = 'mypass';\n  var memcached = require(\"node_memcached\");\n\n  var client = memcached.createClient(PORT, HOST, {\n    username: username,\n    password: password\n  });\n\n  client.on(\"error\", function (err) {\n    console.log(\"Error \" + err);\n  });\n\n  // 10 为过期时间， 10秒\n  client.set('hello', 'world', 10);\n\n  client.get('hello', function(err, res) {\n    console.log(err, res);\n  });\n\n  // 也可以不用设置过期时间\n  client.set('number', 1);\n\n  client.increment('number', 2);\n\n  client.decrement('number', 1);\n\n  client.get('number', function(err, res) {\n    console.log(err, res);\n  });\n```\n\n# API\n\n## Connection Events\n\n`client` 会发送以下事件.\n\n### \"connect\"\n\n`client` 在与 memcached 服务器建立连接后发送 'connect' 事件, 但并不代表 `client` 已经可以向 memcached 发送命令。\n\n### \"ready\"\n\n`client` 在发送 `connect` 事件后, 如果设置了 username 和 password，那么将在 SASL 鉴权 成功后发送 `ready` 事件,\n否则会立即发送 `ready` 事件。 在 `ready` 事件之前，所有的命令都会被加入队列，一旦 `ready` 发送， 这些命令将会依次执行。\n\n### \"error\"\n\n`client` 会在遇到无法处理的错误时发送 `error` 事件。\n\n注意，在 node 中 `error` 是一个特殊的事件，如果 `cliet` 发送了这个事件而没有被侦听，那么将会导致 node 进程退出。因此\n你应该在创建 `client` 的时候主动侦听该事件并作出相应处理。例如：\n\n```javascript\n  var client = Memcached.createClient();\n  client.on('error', function(err) {\n    log('Error', err)\n  })\n```\n\n### \"end\"\n\n`client` 会在与 memcached 断开连接后发送 `end` 事件。\n\n## createClient()\n\n### 选项\n\nredis.createClient() = redis.createClient(PORT, HOST);\n\nredis.createClient() = redis.createClient(PORT, HOST, {\n  username: '',\n  password: ''\n})\n\n* `PORT`: memcached 服务器的端口号，默认为 11211\n* `HOST`: memcached 服务器的 IP 地址，默认为 127.0.0.1\n* `username`: 如果设置了该项，则启用 SASL 鉴权，否则直接连接 memcached 服务器。\n* `password`: 如果设置了该项，则启用 SASL 鉴权，否则直接连接 memcached 服务器。\n\n`createClient()` 将返回一个 `MemcachedClient`  对象.\n\n## end()\n\n强制关闭 `client` 与 memcached 服务器之间的连接。\n\n## 自动重连\n\n在 `client` 断开连接后，如果开发者没有调用 client.end()，则 `client` 将会自动尝试重新连接 memcached 服务器，初始延时为 150ms，\n重连失败后延时加长，最长为 1 分钟并且会持续尝试直到连接成功。\n\n## 打开调试信息\n\n在运行 node 之前输出环境变量 DEBUG=node_memcached 将会打印调试信息。\n\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/chylvina/node_memcached.git"
  },
  "scripts": {
    "test": "node ./test.js"
  },
  "version": "1.1.3"
}
