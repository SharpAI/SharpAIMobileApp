{
  "_args": [
    [
      {
        "raw": "jssha@https://registry.npmjs.org/jssha/-/jssha-2.0.1.tgz",
        "scope": null,
        "escapedName": "jssha",
        "name": "jssha",
        "rawSpec": "https://registry.npmjs.org/jssha/-/jssha-2.0.1.tgz",
        "spec": "https://registry.npmjs.org/jssha/-/jssha-2.0.1.tgz",
        "type": "remote"
      },
      "/Users/simba/workspace/mobile_app_server/hotShareMobile/packages/npm-container/.npm/package-new-15oga7z"
    ]
  ],
  "_from": "jssha@2.0.1",
  "_id": "jssha@2.0.1",
  "_inCache": true,
  "_location": "/jssha",
  "_phantomChildren": {},
  "_requested": {
    "raw": "jssha@https://registry.npmjs.org/jssha/-/jssha-2.0.1.tgz",
    "scope": null,
    "escapedName": "jssha",
    "name": "jssha",
    "rawSpec": "https://registry.npmjs.org/jssha/-/jssha-2.0.1.tgz",
    "spec": "https://registry.npmjs.org/jssha/-/jssha-2.0.1.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/jssha/-/jssha-2.0.1.tgz",
  "_shasum": "d945d29f38db919a5e086261cc012249f6d5d5b7",
  "_shrinkwrap": null,
  "_spec": "jssha@https://registry.npmjs.org/jssha/-/jssha-2.0.1.tgz",
  "_where": "/Users/simba/workspace/mobile_app_server/hotShareMobile/packages/npm-container/.npm/package-new-15oga7z",
  "author": {
    "name": "Brian Turek",
    "email": "brian.turek@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/Caligatio/jsSHA/issues"
  },
  "dependencies": {},
  "description": "jsSHA is a JavaScript implementation of the entire family of SHA hashes as defined in FIPS 180-2 (SHA-1, SHA-224, SHA-256, SHA-384, and SHA-512) as well as HMAC",
  "devDependencies": {},
  "engines": {
    "node": "*"
  },
  "homepage": "https://github.com/Caligatio/jsSHA",
  "keywords": [
    "SHA-1",
    "SHA-256",
    "SHA-224",
    "SHA-384",
    "SHA-512",
    "SHA1",
    "SHA256",
    "SHA224",
    "SHA384",
    "SHA512",
    "SHA2",
    "HMAC",
    "hash"
  ],
  "license": "BSD",
  "main": "src/sha.js",
  "name": "jssha",
  "optionalDependencies": {},
  "readme": "# jsSHA\nA JavaScript implementation of the complete Secure Hash Standard family\n\t(SHA-1, SHA-224, SHA-256, SHA-384, and SHA-512) as well as HMAC by\n\tBrian Turek\n\n## About\njsSHA is a javaScript implementation of the complete Secure Hash Algorithm\nfamily as defined by FIPS PUB 180-2\n(http://csrc.nist.gov/publications/fips/fips180-2/fips180-2withchangenotice.pdf).\n\nIt also includes the HMAC algorithm with SHA support as defined by FIPS PUB 198-1\n(http://csrc.nist.gov/publications/fips/fips198-1/FIPS-198-1_final.pdf)\n\nWith the slow phasing out of MD5 as the standard hash to use in web\napplications, a client-side implementation of the complete Secure Hash Standard\nfamily was needed.  Due to SHA-384 and SHA-512's use of 64-bit values throughout\nthe algorithm, JavaScript can not easily natively support the calculation of\nthese hashes.  As a result, a bit of hacking had to be done to make sure the\nvalues behaved themselves. SHA-224 was added to the Secure Hash Standard family\non 25 February 2004 so it was also included in this package.\n\n## Files\n**src/sha_dev.js**\n\nA commented implementation of the entire SHA family of hashes. Not to be used\nin production.\n\n**src/sha.js**\n\nA Google Closure Compiler optimized version of the entire library\n\n**src/sha1.js**\n\nA Google Closure Compiler optimized version the library with non SHA-1\nfunctionality removed\n\n**src/sha256.js**\n\nA Google Closure Compiler optimized version the library with non SHA-224/SHA-256\nfunctionality removed\n\n**src/sha512.js**\n\nA Google Closure Compiler optimized version the library with non SHA-384/SHA-512\nfunctionality removed\n\n**test/test.html**\n\nA test page that calculates various hashes and has their correct values\n\n**test/genHashRounds.py**\n\nA Python2 script that generates multi-round hash values\n\n**build/make-release**\n\nA Bash script that runs the various Google Closure Compiler commands to build\na release\n\n**build/externs.js**\n\nFile needed solely to make the Google Closure Compilter work\n\n## Usage\n\n### Browser\nInclude the desired JavaScript file (sha.js, sha1.js, sha256.js, or sha512.js)\nin your header (sha.js used below):\n\n\t<script type=\"text/javascript\" src=\"/path/to/sha.js\"></script>\n\n#### Hashing\nInstantiate a new jsSHA object with the desired hash type, input type, and\noptions as parameters.  The hash type can be one of SHA-1, SHA-224, SHA-256,\nSHA-384, or SHA-512.  The input type can be one of HEX, TEXT, B64, or BYTES.\nYou can then stream in input using the \"update\" object function.  Finally,\nsimply call \"getHash\" with the output type as a parameter (B64, HEX, or BYTES).\nExample to calculate the SHA-512 of \"This is a test\":\n\n\tvar shaObj = new jsSHA(\"SHA-512\", \"TEXT\");\n\tshaObj.update(\"This is a test\");\n\tvar hash = shaObj.getHash(\"HEX\");\n\nThe constructor takes a hashmap as a optional third argument with possible\nproperties of \"numRounds\" and \"encoding\".  numRounds controls the number of\nhashing iterations/rounds performed and defaults to a value of \"1\" if not\nspecified. encoding specifies the encoding used to encode TEXT-type inputs.\nValid options are \"UTF8\", \"UTF16BE\", and \"UTF16LE\", it defaults to \"UTF8\".\n\ngetHash also takes a hashmap as an optional second argument.  By default the\nhashmap is `{\"outputUpper\" : false, \"b64Pad\" : \"=\"}`.  These options are\nintelligently interpreted based upon the chosen output format.\n\n#### HMAC\nInstantiate a new jsSHA object the same way as for hashing.  Then set the HMAC\nkey to be used by calling \"setHMACKey\" with the key and its input type (this\nMUST be done before calling update).  You can stream in the input using the\n\"update\" object function just like hashing.  Finally, get the HMAC by calling\nthe \"getHMAC\" function with the output type as its argument.  Example to\ncalculate the SHA-512 HMAC of the string \"This is a test\" with the key \"abc\":\n\n\tvar shaObj = new jsSHA(hashType, \"TEXT\");\n\tshaObj.setHMACKey(\"abc\", \"TEXT\");\n\tshaObj.update(\"This is a test\");\n\tvar hmac = shaObj.getHMAC(\"HEX\");\n\nsetHMACKey takes the same input types as the constructor and getHMAC takes the\nsame inputs as \"getHash\" as described above.\n\nNote: You cannot calculate both the hash and HMAC using the same object.\n\n### Node.js\njsSHA is available through NPM and be installed by simply doing\n\n\tnpm install jssha\nTo use the module, first require it using:\n\n\tjsSHA = require(\"jssha\");\n\nThe rest of the instructions are identical to the [Browser](#browser) section above.\n\n## Compiling\nThis library makes use of the Google Closure Compiler\n(https://developers.google.com/closure/compiler) to both boost performance\nand reduce filesizes.  To compile sha_dev.js into a customized output file, use\na command like the following:\n\n\tjava -jar compiler.jar --define=\"SUPPORTED_ALGS=<FLAG>\" \\\n\t\t--externs /path/to/build/externs.js --warning_level VERBOSE \\\n\t\t--compilation_level ADVANCED_OPTIMIZATIONS \\\n\t\t--js /path/to/sha_dev.js --js_output_file /path/to/sha.js\n\nwhere FLAG is a bitwise OR of the following values:\n\n* 4 for SHA-384/SHA-512\n* 2 for SHA-224/256\n* 1 for SHA-1\n\n## Contact Info\nThe project's website is located at [http://caligatio.github.com/jsSHA/](http://caligatio.github.com/jsSHA/)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/Caligatio/jsSHA.git"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "version": "2.0.1"
}
